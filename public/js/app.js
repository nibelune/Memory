class e{constructor(){this.events={}}on(e,t){return(this.events[e]||(this.events[e]=[])).push(t),this}emit(e,...t){(this.events[e]||[]).slice().forEach((e=>e(...t)))}}class t extends e{constructor(e,t){super(),this.deck=[],this.selectedCards=[],this.maxScore=e,this.score=0,this.startTime=0,this.elapsed=0,this.duration=1e3*t;for(let t=1;t<=e;t++)this.deck.push(t);this.deck=this.deck.concat(...this.deck)}init(){this.shuffle(),this.score=0,this.startTime=(new Date).getTime(),this.elapsed=0,this.timerInterval=setInterval((()=>{this.updateTimer()}),10)}updateTimer(){const e=(new Date).getTime();this.elapsed=e-this.startTime,this.elapsed>this.duration?(clearInterval(this.timerInterval),this.emit("timeout")):this.emit("timeupdate",this.elapsed,this.duration)}shuffle(){this.deck.sort((()=>Math.random()-.5))}getDeck(){return[...this.deck]}selectCard(e){this.selectedCards.push(e),2===this.selectedCards.length&&this.resolveTurn()}resolveTurn(){let e;this.deck[this.selectedCards[0]]==this.deck[this.selectedCards[1]]?(this.score+=1,e=!0,this.checkVictory()):e=!1,this.emit("turnresolved",{match:e,cards:this.selectedCards}),this.selectedCards=[]}async checkVictory(){if(this.score==this.maxScore){clearInterval(this.timerInterval),await(async e=>fetch("/scores",{method:"POST",body:JSON.stringify({score:e}),headers:new Headers({"Content-Type":"application/json"})}).catch((e=>{console.error(e)})))(parseInt(this.elapsed/1e3));const e=await(async()=>fetch("/scores",{method:"GET"}).then((e=>e.json())).then((e=>e.map((e=>e.score)))).catch((e=>{console.error(e)})))();this.emit("victory",this.elapsed,e)}}}class s{constructor(e,t){this.callback=t,console.log(t);const s=document.createElement("div"),i=document.createElement("div"),r=document.createElement("div");s.classList.add("popup"),i.classList.add("content"),r.classList.add("close-btn"),r.textContent="Fermer",i.appendChild(e),s.appendChild(i),s.appendChild(r),r.addEventListener("click",(e=>this.close(e))),document.body.appendChild(s)}close(e){e.target.parentElement.remove(),this.callback&&(this.callback(),this.callback=null)}}class i extends e{constructor(e){super(),this.element=e,this.CardsContainer=document.createElement("div"),this.CardsContainer.classList.add("board"),this.element.appendChild(this.CardsContainer),this.progressBar=document.createElement("div"),this.progressBar.classList.add("progress");const t=document.createElement("div");t.classList.add("timer-container"),t.appendChild(this.progressBar),this.element.appendChild(t)}bindGetHighScores(e){this.getHighScores=e}init(e){this.playedCards=[],this.initCards(e),this.CardsContainer.onclick=e=>this.onCardClick(e)}initCards(e){this.CardsContainer.innerHTML="",e.forEach((e=>{const t=this.buildCard(e);this.CardsContainer.appendChild(t)}))}buildCard(e){const t=document.createElement("div"),s=document.createElement("div"),i=document.createElement("div"),r=document.createElement("div");return t.classList.add("card"),s.classList.add("card-faces-container"),i.classList.add("card-face-front",`card-face-${e}`),r.classList.add("card-face-back"),s.appendChild(i),s.appendChild(r),t.append(s),t}buildHighscores(e){const t=document.createElement("ul");return t.classList.add("highscores"),e.forEach(((e,s)=>{const i=document.createElement("li");i.innerHTML=`<strong>${s+1}</strong> ${e}`,t.appendChild(i)})),t}onCardClick(e){const t=e.target;t.classList.contains("is-flipped")||t.classList.contains("is-matched")||!t.classList.contains("card")||(t.classList.add("is-flipped"),this.emit("cardselected",this.getCardIndex(t)))}onTimeUpdate(e,t){this.progressBar.style.width=e/t*100+"%"}onTurnResolved(e){setTimeout((()=>{const t=this.getCardByIndex(e.cards[0]),s=this.getCardByIndex(e.cards[1]);e.match&&(t.classList.add("is-matched"),s.classList.add("is-matched")),t.classList.remove("is-flipped"),s.classList.remove("is-flipped")}),500)}onVictory(e,t){setTimeout((()=>{const i=document.createElement("div"),r=this.buildHighscores(t);i.innerHTML=`<p>Vous avez gagn√© en <br>${parseInt(e/1e3)} secondes</p>`,i.appendChild(r),new s(i,(()=>this.emit("restartgame")))}),500)}onTimeout(){this.element.querySelector(".progress").style.width="100%",this.CardsContainer.onclick=null;const e=document.createElement("p");e.innerHTML="vous avez perdu",new s(e,(()=>this.emit("restartgame")))}getCardByIndex(e){return this.CardsContainer.querySelectorAll(".card")[e]}getCardIndex(e){return[...this.CardsContainer.querySelectorAll(".card")].indexOf(e)}}class r{constructor(e,t){this.model=e,this.view=t,this.model.on("turnresolved",(e=>this.onTurnResolved(e))),this.model.on("victory",((e,t)=>this.onVictory(e,t))),this.model.on("timeupdate",((e,t)=>this.onTimeUpdate(e,t))),this.model.on("timeout",(()=>this.onTimeout())),this.view.on("cardselected",(e=>this.onCardSelected(e))),this.view.on("restartgame",(()=>this.start()))}onTurnResolved(e){console.log("onTurnResolved"),this.view.onTurnResolved(e)}onVictory(e,t){this.view.onVictory(e,t)}onTimeout(){this.view.onTimeout()}onTimeUpdate(e,t){console.log("onTimeUpdate"),this.view.onTimeUpdate(e,t)}onCardSelected(e){this.model.selectCard(e)}getDeck(){return this.model.getDeck()}getHighscores(){return this.model.getHighScores()}start(){console.log("start"),this.model.init(),this.view.init(this.model.getDeck())}}new class{constructor(e,s,a){this.app=new r(new t(e,s),new i(a)),this.app.start()}}(1,10,document.querySelector("#app"));
