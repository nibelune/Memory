var e=async()=>fetch("/scores",{method:"GET"}).then((e=>e.json())).then((e=>e.map((e=>e.score)))).catch((e=>{console.error(e)})),t=async e=>fetch("/scores",{method:"POST",body:JSON.stringify({score:e}),headers:new Headers({"Content-Type":"application/json"})}).catch((e=>{console.error(e)}));class s{constructor(){this.events={}}on(e,t){return(this.events[e]||(this.events[e]=[])).push(t),this}emit(e,...t){(this.events[e]||[]).slice().forEach((e=>e(...t)))}}class i extends s{constructor(e,t){super(),this.deck=[],this.selectedCards=[],this.matchedCards=[],this.victoryScore=e,this.score=0,this.startTime=0,this.elapsed=0,this.duration=1e3*t,this.timerInterval=null;for(let t=1;t<=e;t++)this.deck.push(t);this.deck=this.deck.concat(...this.deck)}start(){this.shuffleDeck(),this.score=0,this.selectedCards=[],this.matchedCards=[],this.startTime=(new Date).getTime(),this.elapsed=0,this.timerInterval=setInterval((()=>{this.updateTimer()}),20)}async updateTimer(){const t=(new Date).getTime();if(this.elapsed=t-this.startTime,this.elapsed>this.duration){clearInterval(this.timerInterval);const t=await e();this.emit("timeout",t)}else this.emit("timeupdate",this.elapsed,this.duration)}shuffleDeck(){this.deck.sort((()=>Math.random()-.5))}getDeck(){return[...this.deck]}selectCard(e){this.matchedCards.includes(e)||(this.selectedCards.push(e),2===this.selectedCards.length&&this.resolveTurn())}resolveTurn(){let e;this.deck[this.selectedCards[0]]===this.deck[this.selectedCards[1]]?(this.score+=1,e=!0,this.matchedCards.push(this.selectedCards[0],this.selectedCards[1]),this.checkVictory()):e=!1,this.emit("turnresolved",{cardsMatch:e,cards:this.selectedCards}),this.selectedCards=[]}async checkVictory(){if(this.score===this.victoryScore){clearInterval(this.timerInterval),await t(parseInt(this.elapsed/1e3));const s=await e();this.emit("victory",this.elapsed,s)}}}class a{constructor(e){this.face=e,this.cardElement=document.createElement("div");const t=document.createElement("div"),s=document.createElement("div"),i=document.createElement("div");this.cardElement.classList.add("card"),t.classList.add("card-faces-container"),s.classList.add("card-face-front",`card-face-${this.face}`),i.classList.add("card-face-back"),t.appendChild(s),t.appendChild(i),this.cardElement.append(t)}appendTo(e){e.appendChild(this.cardElement)}isClickable(){return!this.cardElement.classList.contains("is-flipped")&&!this.cardElement.classList.contains("is-matched")&&this.cardElement.classList.contains("card")}flipIn(){this.cardElement.classList.add("is-flipped")}flipOut(){this.cardElement.classList.remove("is-flipped")}match(){this.cardElement.classList.add("is-matched")}}class r{constructor(){this.progressBarElement=document.createElement("div"),this.progressBarElement.classList.add("progress"),this.timerElement=document.createElement("div"),this.timerElement.classList.add("timer-container"),this.timerElement.appendChild(this.progressBarElement)}appendTo(e){e.appendChild(this.timerElement)}setProgress(e){this.progressBarElement.style.width=100*e+"%"}}class c{constructor(e,t){this.callback=t,console.log(t);const s=document.createElement("div"),i=document.createElement("div"),a=document.createElement("div");s.classList.add("popup"),i.classList.add("content"),a.classList.add("close-btn"),a.textContent="Fermer",i.appendChild(e),s.appendChild(i),s.appendChild(a),a.addEventListener("click",(e=>this.close(e))),document.body.appendChild(s)}close(e){e.target.parentElement.remove(),this.callback&&(this.callback(),this.callback=null)}}class n extends s{constructor(e){super(),this.element=e,this.cards=[],this.cardsContainer=document.createElement("div"),this.cardsContainer.classList.add("board"),this.element.appendChild(this.cardsContainer),this.timer=new r,this.timer.appendTo(this.element)}start(e){this.initCards(e),this.cardsContainer.onclick=e=>this.onCardClick(e)}initCards(e){this.cardsContainer.innerHTML="",this.cards=[],this.cards=[],e.forEach((e=>{const t=new a(e);this.cards.push(t)})),this.cards.forEach((e=>e.appendTo(this.cardsContainer)))}buildHighscores(e){const t=document.createElement("ul");return t.classList.add("highscores"),e.forEach(((e,s)=>{const i=document.createElement("li");i.innerHTML=`<strong>${s+1}</strong> ${e}`,t.appendChild(i)})),t}onCardClick(e){const t=e.target;if(!t.classList.contains("card"))return;const s=this.cards[this.getCardIndex(t)];s.isClickable()&&(s.flipIn(),this.emit("cardselected",this.getCardIndex(t)))}onTimeUpdate(e,t){this.timer.setProgress(e/t)}onTurnResolved(e){setTimeout((()=>{const t=[this.cards[e.cards[0]],this.cards[e.cards[1]]];e.cardsMatch&&t.forEach((e=>e.match())),t.forEach((e=>e.flipOut()))}),500)}onVictory(e,t){this.cardsContainer.onclick=null,setTimeout((()=>{const s=`Vous avez gagn√© en <br>${parseInt(e/1e3)} secondes`;this.openPopup(s,t,(()=>this.emit("restartgame")))}),500)}onTimeout(e){this.timer.setProgress(1),this.cardsContainer.onclick=null,this.openPopup("Vous avez perdu...",e,(()=>this.emit("restartgame")))}openPopup(e,t,s){const i=this.buildHighscores(t),a=document.createElement("div");a.innerHTML=`<p>${e}</p>`,a.appendChild(i),new c(a,(()=>s()))}getCardIndex(e){return[...this.cardsContainer.querySelectorAll(".card")].indexOf(e)}}class d{constructor(e,t){this.model=e,this.view=t,this.model.on("turnresolved",(e=>this.onTurnResolved(e))),this.model.on("victory",((e,t)=>this.onVictory(e,t))),this.model.on("timeupdate",((e,t)=>this.onTimeUpdate(e,t))),this.model.on("timeout",(e=>this.onTimeout(e))),this.view.on("cardselected",(e=>this.onCardSelected(e))),this.view.on("restartgame",(()=>this.start()))}start(){this.model.start(),this.view.start(this.model.getDeck())}onTurnResolved(e){this.view.onTurnResolved(e)}onVictory(e,t){this.view.onVictory(e,t)}onTimeout(e){this.view.onTimeout(e)}onTimeUpdate(e,t){this.view.onTimeUpdate(e,t)}onCardSelected(e){this.model.selectCard(e)}getDeck(){return this.model.getDeck()}}new class{constructor(e,t,s){this.app=new d(new i(e,t),new n(s)),this.app.start()}}(14,120,document.querySelector("#app"));
